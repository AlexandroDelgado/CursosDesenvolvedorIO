<!--
    Model com M maiusculo representa a instância da model.
    Model com m minusculo representa o mapeamento de que model vai ser utilizada na view.
-->
@model TesteMVC5.Models.Aluno

<h2>Novo Aluno</h2>

@using (Html.BeginForm())
{

<div class="form-horizontal">
    <h4>Informe os dados do aluno:</h4>
    <hr />
    <!-- Efetua a validação do formulário com base no modelo gerado e mostra todos os erros logo abaixo da mensagem dele no top da tela.

            O primeiro parâmetro aceita um boleano onde true não exibe os retornos da validação no top da tela.
            O segundo parâmetro "", serve para se passar uma mensagem de texto, tipo: "Todos os campos com * são de preenchimento obrigatório!"

    -->
    @Html.ValidationSummary(false, "Todos os campos com * são de preenchimento obrigatório!", new { @class = "text-danger" })
    <!--
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    -->

    <div class="form-group">

        @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CPF, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Ativo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.CheckBoxFor(model => model.Ativo, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <!--
        Inclui uma PartialView(Include)
        Caso queira enviar uma model dentro de uma partialView Html.Partial("_SubmissaoForm", Model), a model tem que ser passada na controller: return View(Aluno).
        E a PartialView que estiver recebendo esta model, tem que ter declarado o modelo no topo de sua pagina exe: model TesteMVC5.Models.Aluno e a instância do modelo
        não pode estar nulla, ela deve estar preenchida.
        Passar models é muito comum no caso de alteração para o banco.
    -->
    @Html.Partial("_SubmissaoForm")
</div>
}
<!-- Adiciona os JavaScripts -->
@section Scripts
{
    <!-- gera os scripts para a validação do javaScript com base na validação da model -->
    @Scripts.Render("~/bundles/jqueryval")
}