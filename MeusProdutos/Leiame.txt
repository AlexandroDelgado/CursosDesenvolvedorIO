COMEÇANDO O CURSO MVC5 AVANÇADO

1) Sempre criem uma solução em branco.

2) Crie as pastas dentro desta solução: 
	a. "src" que irá receber os projetos 
	b. "tests" que irá receber os projetos de testes.
	c. "sql" = que irá manter os scripts.
	d. "docs" = que irá manter os documentos.

3) Padronizações:
	a. Nome de projeto (Microsoft.AspNet.Razor) a microsoft por exemplo usa esta padronização onde:
		Microsoft = Nome da empresa.
		AspNet = Nome do projeto.
		Razor = Nome da especialização.

4) Framework:
	Por padrão é sempre interessante utilizar a versão anterior mais nova, por ser uma versão mais estável.
	Caso você queira que este projeto seja parte de um projeto CORE, a versão mais estável para comunicação
		é a 4.6 (verificar se existem mais novas).
	Agora se for apenas um projeto em MVC você pode até fazer na 4.8.

5) Crie 3 projetos:
	DevIO.AppMVC (Projeto)
	DevIO.Business (Camada de Negócios)
	DevIO.Infra (Camada de Dados)

6) Configurando os projetos:
	a) Abra as referências na camada de negócios (DevIO.Business/Referências) e deixe apenas a referência para "System".
	b) Na camada MVC (DevIo.AppMVC) adicione as referências de projetos (clicando com o botão direito do mouse em cima dela, 
			adicionar, referências... e escolha a opção projetos no menu ao lado direito da tela.
		Selecione as camadas Negócios e Infra e clique em OK.
	c) Na camada de (DevIo.Infra) de acesso a referêcia da camada de Negócios (DevIo.Business).

	Observação: A camada MVC consegue enxergar as camadas de Negócio e Infra.
			Já a camada de Infra consegue enchergar a camada de Negócio.
			E a camada de Negócios não deve enxergar nenhuma das outras camadas.

--------------------------------------------------------------------------------------------------------------------------------------
MODELANDO A CAMADA DE NEGÓCIOS

1) Procure iniciar a sua aplicação pela camada de negócios, para ter uma visão melhor de que models irá precisar depois.

2) Crie duas pastas que irão receber as entidades e as composições de responsabilidades:
	a) Core = Em projetos mais complexos transforme a pasta "Core" em um projeto, já em projetos mais simples pode ser pasta mesmo. (Entender Melhor essa Idéia)
		Essa pasta ficará as classes gerais, que não são Fornecedores e nem Produtos.
	b) Models = Dentro desta pasta crie uma pasta para cada funcionalidade, no caso deste projeto crie: "Fornecedores" e "Produtos". Procure usar o nome das pastas no
		plural para evitar problemas de compartibilidade com a própria classe exe: Fornecedores/Fornecedor.cs
	c) Core = Crie uma pasta "Models" dentro da pasta "Core" também para representar os objetos base do conceito no caso de entidade.

3) Na pasta "Core\Models" adicione uma classe chamada "Entity".
4) Na pasta "Models\Fornecedores" crie uma classe chamada "Fornecedor" que herdará da classe "Entity".
5) Na pasta "Models\Fornecedores" crie uma classe chamada "Endereco" que herdará da classe "Entity".
6) Na pasta "Models\Fornecedores" crie uma classe chamada "TipoFornecedor".
7) Na pasta "Models\Produtos" crie um classe chamada "Produto" que herdará da classe "Entity".
8) Siga conforme esta Escrito nos arquivos

--------------------------------------------------------------------------------------------------------------------------------------
INTERFACES DE ACESSO A DADOS

obs: Podemos fazer a parte de acesso a dados na camada de negócio ao invés da camada de infra, ja que estamos falando de interfaces e não imprementação concreta.

1) Na camada de Negócios, crie uma pasta chamada "Cor\Data" e dentro dessa pasta crie uma classe chamada "IRepository". E utilize o código.
2) Clique na pasta com o botão direito na pasta "Models\Fornecedores (Não é a do Core)", e clique em adicionar/Novo Item, e escolha um arquivo do 
	tipo Repository e chame o mesmo de IFornecedorRepository e clique em ok.
3) Clique na pasta com o botão direito na pasta "Models\Fornecedores (Não é a do Core)", e clique em adicionar/Novo Item, e escolha um arquivo do 
	tipo Repository e chame o mesmo de IEnderecoRepository e clique em ok.
3) Clique na pasta com o botão direito na pasta "Models\Produtos (Não é a do Core)", e clique em adicionar/Novo Item, e escolha um arquivo do 
	tipo Repository e chame o mesmo de IProdutoRepository e clique em ok.

-----------------------------------------------------------------------------------------------------------------------------------------
MAPEANDO BANCO DE DADOS

obs: Mapeando o banco de dados e provendo o acesso a dados através do Entity Framework.

1) Na camada Infra, crie uma pasta chamada "Data", dentro dessa pasta, crie uma nova pasta chamada "Context" e dentro da context crie uma classe chamada "MeuDbContex.cs"
	(Caso fosse uma aplicação real chamaria de ProjetoBancoDbContext.cs).
2) Vá até o "Console do Gerenciador de Pacotes", aponte a "Origem do pacote: nuget.org" e aponte o "Projeto padrão: para Infra". Em seguida digite no console: 
	"install-package EntityFramework" e aperte enter.
3) Configure o arquivo "MeuDbContext.cs".
4) Vá até o "Console do Gerenciador de Pacotes" e digite o comando "Enable-Migrations" e aperte enter. O mesmo lhe retornará um erro e irá solicitar para que você 
	utilize o Flent API ().
5) Dentro da pasta "DevIO.Infra\Data" crie uma nova pasta chamada "Mappings".
6) Dentro desta pasta "Mappings" crie um arquivo chamado "FornecedorConfig.cs" (Nos próximos projetos chame de FornecedorMapping.cs) e adicione o conteúdo da mesma. 
	Por este motivo que a camada de acesso a dados(Infra) precisa conhecer a camada de negócios(Business), para poder mapear os objetos.
7) Dentro desta pasta "Mappings" crie um arquivo chamado "EnderecoConfig.cs" e adicione o conteúdo da mesma. 
8) Dentro desta pasta "Mappings" crie um arquivo chamado "ProdutoConfig.cs" e adicione o conteúdo da mesma.
9) Agora abra a classe MeuDbContext e efetue a configuração dos mapeamentos, logo abaixo dos mapeamentos do DbSet.
10) Vá até o "Console do Gerenciador de Pacotes" e digite o comando "Enable-Migrations" e aperte enter.
11) Ele criou a pasta "Migrations" e o arquivo "Configuration.cs", acesse este arquivo, remova os scripts desnecessários e altere o "AutomaticMigrationsEnabled" para true,
	e arraste a pasta "Migrations" para dentro da pasta "Data".
12) Vá até o "Console do Gerenciador de Pacotes" e digite o comando "update-database -Script".
13) Caso o seu script de criação do banco, seja satisfatório, salve ele na pasta "sql" que está no diretório desta solução para ser encaminhado para o DBA para aprovação.
14) Execute "update-database -Verbose" para alterar a base de dados.

--------------------------------------------------------------------------------------------------------------------------------------
PADRÃO REPOSITORY

0bs: Utilizaremos dois padrões de repositórios o primeiro é o "Abstract ou Generic Repository". Não se deve estanciar um repositório genérico para trabalhar com uma entidade, 
		e sim delegar herança através de um repositório especializado.

		Repositório Genérico: Implementa o  que todas as entidades fazem em comum.
			(Quando eu quero sobreescrever um método simplesmente faço um override do método no repositório genérico).
		Repositório Especializado: Implementa o que as entidades fazem por conta própria, ou seja, de forma especifica.


	 Temos então um respositorio especializado para cada entidade, um repositóri genérico para o que todas as entidades fazem em comum, 

1) Crie uma pasta chamada "Repository" em "DevIO.Infra\Data\", e em seguida crie dentro desta pasta uma classe chamada "Repository.cs".
2) Dentro de "DevIO.Infra\Data\Repository\" crie uma classe chamada "FornecedorRepository.cs", "EndereçoRepository.cs" e uma "ProdutosRepository.cs", que que serão os 
	repositórios especializados, que herdaram as classes genéricas das entidades.

--------------------------------------------------------------------------------------------------------------------------------------
VALIDAÇÕES, SERVIÇOS E PROCESSOS DE NEGÓCIOS

Obs: A camada de negócios é a responsável por garantir o fluxo e a consistência do seu processo.

1) Vá até o "Console do Gerenciador de Pacotes" e selecione Package source: "nuget.org", Default Projetct: "DevIO.Business" em seguida digite: "Install-Package FluentValidation -Version 9.2.2" e precione enter.
2) Na pasta "Core" em "DevIO.Business\Core\" crie uma pasta chamada:  "Validations" e dentro desta pasta, crie outra pasta chamada "Documents" e dentro dela crie uma classe 
	chamada "ValidacaoDocs". (que depois será separada em CPF e CNPJ)
3) Crie uma pasta chamada "Validations" em "DevIO.Business\Models\Fornecedores\", e em seguida crie dentro desta pasta uma classe chamada "FornecedorValidation.cs" e uma 
	chamada "EnderecoValidation.cs".
4) Crie uma pasta chamada "Validations" em "DevIO.Business\Models\Produtos\", e em seguida crie dentro desta pasta uma classe chamada "ProdutoValidation.cs".
5) Crie uma pasta chamada "Services" em "DevIO.Business\Models\Fornecedores\", e em seguida crie dentro desta pasta uma Interface chamada "IFornecedorService.cs" e uma classe
	chamada "FornecedorService.cs"
6) Crie uma pasta chamada Services em "DevIo.Business\Core\", e em seguida crie uma classe chamada "BaseService.cs".
7) Adicione uma nova controller em "DevIO.AppMVC\Controllers" como o nome de "FornecedoresController.cs".
8) Crie uma pasta em "DevIO.Business\Models\Produtos\" chamada "Services" e dentro desta pasta crie uma interface chamada "IProdutoService.cx" e uma classe chamada "ProdutoService.cs".
9) Crie uma pasta chamada "Notifications" em "DevIo.Business\Core\", e em seguida crie uma classe chamada "Notificacao.cs", uma interface chamada "INotificador.cs" e uma classe chamada "Notificador.cs".

--------------------------------------------------------------------------------------------------------------------------------------
SETUP DA CAMADA DE APRESENTAÇÃO




__________________________________________________________________________________________________________________________________________________________________________
CORREÇÕES A SEREM FEITAS.

Veja: 
	O que é um arquivo de resurce?

	O que é injeção de dependencia?

	Tutorial do Eduardo Pires no youtube sobre Especification Partern (Para caprichar na regra de negócios).
	

1) Divida o arquivo "DevIO.Business\Core\Validations\ValidacaoDocs.cs", para dois arquivos chamados "CPF.cs" e "CNPJ.cs" na mesma pasta, pegue o conteúdo da 
	classe ValidacaoDocs.cs e divida nas outras duas classes, remova a classe ValidacaoDocs.cs e teste a aplicação e em seguida melhore os textos das mensagens de validação.

2) Altere o campo numero do endereço para int, faça o update no banco e teste a aplicação.

3) Altere o id de Guid para int, faça o update no banco e teste a aplicação.

4) Altere o formato do repositório do fornecedor para permitir "Tipo de Telefone".

5) Altere o formato do repositório de endereço para permitir o cadastro de "Tipo de Endereço".